using UnityEngine;
using System.Collections;

[ExecuteInEditMode]
public class NinesliceRenderer : MonoBehaviour {
	public Transform
		lowerLeft,
		left,
		upperLeft,
		upper,
		upperRight,
		right,
		lowerRight,
		lower,
		center;

	public Vector3
		lowerLeftScale = Vector3.one / 3f,
		upperRightScale = Vector3.one * 2f/3f;

	public bool rebuildUV;

	Vector3 lastScale, lastLLScale, lastURScale;
	Transform tx;
	
	void Start() {
		tx = transform;

	}
/*	void OnDisable() {
		foreach(MeshFilter mf in GetComponentsInChildren<MeshFilter>()) {
			if ( mf.sharedMesh.name == "Generated By Nineslicer") {
#if UNITY_EDITOR
				DestroyImmediate(mf.sharedMesh);
#else
				Destroy(mf.sharedMesh);
#endif
			}
		}
	}
/**/
	void Update() {
		if ( tx.localScale != lastScale || lastLLScale != lowerLeftScale || lastURScale != upperRightScale) {
			foreach(Transform t in new Transform[]{lowerLeft,left,upperLeft,upper,upperRight,right,lowerRight,lower,center}){
				if ( ! t ) return;
			}
			foreach(Transform t in new Transform[]{lowerLeft,left,upperLeft,upper,upperRight,right,lowerRight,lower,center}){
				t.parent = null;
			}
			lastScale = tx.localScale;
			lastLLScale = lowerLeftScale; lastURScale = upperRightScale;
			Vector3
				leftScale = lowerLeftScale.WithY(lastScale.y - lowerLeftScale.y - upperRightScale.y),
				upperScale = upperRightScale.WithX(lastScale.x -lowerLeftScale.x-upperRightScale.x),
				rightScale = upperRightScale.WithY(leftScale.y),
				lowerScale = lowerLeftScale.WithX(upperScale.x),
				upperLeftScale = lowerLeftScale.WithY(upperRightScale.y),
				lowerRightScale = lowerLeftScale.WithX(upperRightScale.x),
				centerScale = upperScale.WithY(rightScale.y),

				leftPos = -Vector3.right * lastScale.x/2f - Vector3.up * (upperRightScale.y-lowerLeftScale.y)/2f,
				rightPos = leftPos.WithX(-leftPos.x),
				upperPos = Vector3.up * lastScale.y/2f - Vector3.right * (upperRightScale.x-lowerLeftScale.x)/2f,
				lowerPos = upperPos.WithY(-upperPos.y);

			lowerLeft.localScale = lowerLeftScale;
			lowerLeft.position = tx.position + leftPos.WithY(0f) + lowerPos.WithX(0f);

			left.localScale = leftScale;
			left.position = tx.position + leftPos;

			upperLeft.localScale = upperLeftScale;
			upperLeft.position = tx.position + upperPos.WithX(0f) + leftPos.WithY(0f);

			upper.localScale = upperScale;
			upper.position = tx.position + upperPos;

			upperRight.localScale = upperRightScale;
			upperRight.position = tx.position + upperPos.WithX(0f) + rightPos.WithY(0f);

			right.localScale = rightScale;
			right.position = tx.position + rightPos;

			lowerRight.localScale = lowerRightScale;
			lowerRight.position = tx.position + rightPos.WithY(0f) + lowerPos.WithX(0f);

			lower.localScale = lowerScale;
			lower.position = tx.position + lowerPos;

			center.localScale = centerScale;
			center.position = tx.position;

			if ( rebuildUV ) {
				float 
					r = 1f-upperRightScale.x,
					t = 1f-upperRightScale.y,
					b = lowerLeftScale.y,
					l = lowerLeftScale.x;

				BuildMeshUVs(lowerLeft.GetComponentInChildren<MeshFilter>(),Vector2.zero, lowerLeftScale);
				BuildMeshUVs(upperRight.GetComponentInChildren<MeshFilter>(),Vector3.one-upperRightScale,Vector2.one);
				BuildMeshUVs(upperLeft.GetComponentInChildren<MeshFilter>(),new Vector2(0f,t), new Vector2(l,1f));
				BuildMeshUVs(lowerRight.GetComponentInChildren<MeshFilter>(),new Vector2(r,0f), new Vector2(1f,b));
				BuildMeshUVs(left.GetComponentInChildren<MeshFilter>(),new Vector2(0f,b),new Vector2(l,t));
				BuildMeshUVs(right.GetComponentInChildren<MeshFilter>(),new Vector2(r,b),new Vector2(1f,t));
				BuildMeshUVs(upper.GetComponentInChildren<MeshFilter>(),new Vector2(l,t),new Vector2(r,1f));
				BuildMeshUVs(lower.GetComponentInChildren<MeshFilter>(),new Vector2(l,0f),new Vector2(r,b));
				BuildMeshUVs(center.GetComponentInChildren<MeshFilter>(),new Vector2(l,b),new Vector2(r,t));
			}

			foreach(Transform t in new Transform[]{lowerLeft,left,upperLeft,upper,upperRight,right,lowerRight,lower,center}){
				t.parent = tx;
			}
		}
	}

	void BuildMeshUVs(MeshFilter mf, Vector2 lowerLeft, Vector2 upperRight) {
		Mesh m;
		if ( mf.sharedMesh.name == "Generated By Nineslicer") {
			m = mf.sharedMesh;
		} else {
			m = new Mesh();
			m.vertices = mf.sharedMesh.vertices;
			m.normals = mf.sharedMesh.normals;
			m.triangles = mf.sharedMesh.triangles;
			m.tangents = mf.sharedMesh.tangents;
			m.name = "Generated By Nineslicer";
		}
		m.uv = new Vector2[]{
			// low-right, top-left, low-left, top-rightt
			lowerLeft.WithX(upperRight.x), upperRight.WithX(lowerLeft.x), lowerLeft, upperRight
		};
		mf.sharedMesh = m;
	}
}

